struct TheStruct {
};
struct TheStruct theStruct;

class TheClass {
};

TheClass theClass;


class MyClass {
public:
	int x;
	const char v[4] = "abc";

	void foo();

	int bar() const;

	virtual void v_foo();

	static void s_foo(MyClass *smth);
};

void MyClass::s_foo(MyClass *self) {
	return self->v_foo();
}

//#include <string>
//#include <vector>

namespace foo {
//  void bar(std::string s);
	class Bar {
	public:
		Bar() = delete;

		Bar(const Bar &);

		Bar(Bar &);

		Bar(int x, int y);

		~Bar();

		//    std::vector<int> vec;
		char *xxx;
		signed char* s_char;

		class InnerBar {
		} inner;
	};
}

long x;
	GetTypesVisitor> var x>
	 type: long.Long
	 canonical: long.Long
	 pointee: .Invalid
	 elemKind: .Invalid

class Unknown;

Unknown* that;
	GetTypesVisitor> var that>
	 type: Unknown *.Pointer
	 canonical: Unknown *.Pointer
	 pointee: Unknown.Record
	 elemKind: .Invalid

typedef short u16;
typedef Unknown* Uuu;
typedef int A4[4];

u16 y16;
GetTypesVisitor> var y16>
 type: u16.Typedef
 canonical: short.Short
 pointee: .Invalid
 elemKind: .Invalid

Uuu unknownPtr;
	GetTypesVisitor> var unknownPtr>
	 type: Uuu.Typedef
	 canonical: Unknown *.Pointer
	 pointee: .Invalid
	 elemKind: .Invalid

unsigned char u_chars[10];
	GetTypesVisitor> var u_chars>
	 type: unsigned char [10].ConstantArray
	 canonical: unsigned char [10].ConstantArray
	 pointee: .Invalid
	 elemKind: unsigned char.UChar

template <class T> class Vector {};

Vector<A4> A4Vector;
	getTypesVisitor> var A4Vector>
	 type: Vector<A4>.Unexposed
	 canonical: Vector<int [4]>.Record
	 pointee: .Invalid
	 elemKind: .Invalid


struct Logger;
typedef struct Logger Logger;

#ifdef __cplusplus
extern "C" {
#endif

Logger *log_create(void);
void log_write(Logger *log, const char *msg);

#ifdef __cplusplus
} // __cplusplus
#endif