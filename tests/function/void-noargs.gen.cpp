// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!! This file is auto-generated by Reflang. !!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#include "void-noargs.gen.hpp"

#include <algorithm>
#include <cassert>
#include <stdexcept>
#include <type_traits>

namespace reflang
{


int Function<void(*)(), ns::NamespacedFunction>::GetParameterCount() const
{
	return 0;
}

Parameter Function<void(*)(), ns::NamespacedFunction>::GetReturnType() const
{
	Parameter result;
	result.Type = "void";
	return result;
}

Parameter Function<void(*)(), ns::NamespacedFunction>::GetParameter(int i) const
{
	if (i < 0 || i >= GetParameterCount())
	{
		throw Exception("Argument out of range.");
	}

	Parameter result;
	return result;
}

static const std::string ns__NamespacedFunction_name = "ns::NamespacedFunction";

const std::string& Function<void(*)(), ns::NamespacedFunction>::GetName() const
{
	return ns__NamespacedFunction_name;
}

Object Function<void(*)(), ns::NamespacedFunction>::Invoke(const std::vector<Object>& args)
{
	if (args.size() != GetParameterCount())
	{
		throw Exception("Invoke(): bad argument count.");
	}

	ns::NamespacedFunction();
	return Object();
}

namespace
{
	// Object to auto-register ns::NamespacedFunction.
	struct ns__NamespacedFunction_registrar
	{
		ns__NamespacedFunction_registrar()
		{
			::reflang::registry::internal::Register(
					std::make_unique<Function<void(*)(), ns::NamespacedFunction>>());
		}
	} ns__NamespacedFunction_instance;
}



int Function<void(*)(), GlobalFunction>::GetParameterCount() const
{
	return 0;
}

Parameter Function<void(*)(), GlobalFunction>::GetReturnType() const
{
	Parameter result;
	result.Type = "void";
	return result;
}

Parameter Function<void(*)(), GlobalFunction>::GetParameter(int i) const
{
	if (i < 0 || i >= GetParameterCount())
	{
		throw Exception("Argument out of range.");
	}

	Parameter result;
	return result;
}

static const std::string GlobalFunction_name = "GlobalFunction";

const std::string& Function<void(*)(), GlobalFunction>::GetName() const
{
	return GlobalFunction_name;
}

Object Function<void(*)(), GlobalFunction>::Invoke(const std::vector<Object>& args)
{
	if (args.size() != GetParameterCount())
	{
		throw Exception("Invoke(): bad argument count.");
	}

	GlobalFunction();
	return Object();
}

namespace
{
	// Object to auto-register GlobalFunction.
	struct GlobalFunction_registrar
	{
		GlobalFunction_registrar()
		{
			::reflang::registry::internal::Register(
					std::make_unique<Function<void(*)(), GlobalFunction>>());
		}
	} GlobalFunction_instance;
}


}  // namespace reflang
