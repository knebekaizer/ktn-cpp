// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!! This file is auto-generated by Reflang. !!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#include "static-fields.gen.hpp"

#include <algorithm>
#include <cassert>
#include <stdexcept>
#include <type_traits>

namespace reflang
{


const int Class<MyClass>::FieldCount;
const int Class<MyClass>::StaticFieldCount;
const int Class<MyClass>::MethodCount;
const int Class<MyClass>::StaticMethodCount;

int Class<MyClass>::GetFieldCount() const
{
	return FieldCount;
}

Reference Class<MyClass>::GetField(const Reference& r, const std::string& name) const
{
	throw Exception("Invalid name passed to GetField().");
}

int Class<MyClass>::GetStaticFieldCount() const
{
	return StaticFieldCount;
}

Reference Class<MyClass>::GetStaticField(const std::string& name) const
{
		if (name == "var")
		{
			return Reference(MyClass::var);
		}
		if (name == "const_var")
		{
			return Reference(MyClass::const_var);
		}
		if (name == "pointer_var")
		{
			return Reference(MyClass::pointer_var);
		}
		if (name == "const_pointer_var")
		{
			return Reference(MyClass::const_pointer_var);
		}
		if (name == "const_pointer_const_var")
		{
			return Reference(MyClass::const_pointer_const_var);
		}
		if (name == "ref_var")
		{
			return Reference(MyClass::ref_var);
		}
		if (name == "const_ref_var")
		{
			return Reference(MyClass::const_ref_var);
		}
		if (name == "constexpr_var")
		{
			return Reference(MyClass::constexpr_var);
		}
		if (name == "complex")
		{
			return Reference(MyClass::complex);
		}
		if (name == "const_complex")
		{
			return Reference(MyClass::const_complex);
		}
		if (name == "pointer_complex")
		{
			return Reference(MyClass::pointer_complex);
		}
		if (name == "const_pointer_complex")
		{
			return Reference(MyClass::const_pointer_complex);
		}
		if (name == "const_pointer_const_complex")
		{
			return Reference(MyClass::const_pointer_const_complex);
		}
		if (name == "ref_complex")
		{
			return Reference(MyClass::ref_complex);
		}
		if (name == "const_ref_complex")
		{
			return Reference(MyClass::const_ref_complex);
		}
	throw Exception("Invalid name passed to GetStaticField().");
}

int Class<MyClass>::GetMethodCount() const
{
	return MethodCount;
}

std::vector<std::unique_ptr<IMethod>> Class<MyClass>::GetMethod(const std::string& name) const
{
	std::vector<std::unique_ptr<IMethod>> results;

	return results;
}

int Class<MyClass>::GetStaticMethodCount() const
{
	return StaticMethodCount;
}

std::vector<std::unique_ptr<IFunction>> Class<MyClass>::GetStaticMethod(
		const std::string& name) const
{
	std::vector<std::unique_ptr<IFunction>> results;

	return results;
}

static const std::string MyClass_name = "MyClass";

const std::string& Class<MyClass>::GetName() const
{
	return MyClass_name;
}



namespace
{
	// Object to auto-register MyClass.
	struct MyClass_registrar
	{
		MyClass_registrar()
		{
			::reflang::registry::internal::Register(
					std::make_unique<Class<MyClass>>());
		}
	} MyClass_instance;
}

}  // namespace reflang
