// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!! This file is auto-generated by Reflang. !!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#ifndef REFLANG_METADATA_C_ENUM_GEN_HPP
#define REFLANG_METADATA_C_ENUM_GEN_HPP

#include <string>

#include "lib/reflang.hpp"
#include "c-enum.src.hpp"

namespace reflang
{

template <>
struct Enum<CEnum> : public IEnum
{
	using EnumType = CEnum;

	struct ConstIterator
	{
		ConstIterator(bool is_last);

		EnumType operator*();

		ConstIterator& operator++();
		ConstIterator operator++(int);
		ConstIterator& operator--();
		ConstIterator operator--(int);

		bool operator==(const ConstIterator& o) const;
		bool operator!=(const ConstIterator& o) const;

	private:
		EnumType value_;
		bool last_ = true;
	};

	struct IteratorContainer
	{
		ConstIterator begin() const;
		ConstIterator end() const;
	};

	static IteratorContainer Iterate();

	static bool TryTranslate(const std::string& s, EnumType& value);
	static std::string Translate(EnumType e);

	const std::string& GetName() const override;

	std::vector<std::string> GetStringValues() const override;

	std::vector<int> GetIntValues() const override;

	bool TryTranslate(const std::string& value, int& out) override;
	bool TryTranslate(int value, std::string& out) override;
};


}  // namespace reflang

#endif //REFLANG_METADATA_C_ENUM_GEN_HPP
